Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-07-25T13:36:32+08:00

====== 第二章 顺序编程 ======
创建日期 星期三 25 七月 2018

===== 2.1 变量 =====

=== 2.1.1 变量声明 ===
var v1 int
var v2 string
var v3 [10]int			//数组
var v4 []int			//数组切片
var v5 struct {
	f int
}
var v6 *int				//指针
var v7 map[string] int		//map,key为string类型，value为int类型
var v8 func(a int) int
变量声明语句不需要分号作为结束符，避免重复，可以：
var (
	v1 int
	v2 string
)

=== 2.1.2 变量初始化 ===
var关键字可以保留，但不再是必要：
var v1 int = 10
var v2 = 10
v3 := 10

=== 2.1.3 变量赋值 ===
Go语言的变量赋值与多数语言一致，但提供一个多重赋值功能：
i, j = j, i

=== 2.1.4 匿名变量 ===
—，—，nickname := GetName()

--------------------

===== 2.2 常量 =====

=== 2.2.1 字面常量 ===
literal，指程序中硬编码的常量，如：
-12	3.1415926		3.2 + 12i	true	"foo"
Go语言的字面常量是无类型的，只要常量在相应的类型的值域范围内，就可以作为常量。

=== 2.2.2 常量定义 ===
通过const关键字，如：
const Pi float64 = 3.1415926
const zero = 0.0
可以限定常量类型，但不是必需的，如果没有指定，那么就与字面常量一样。

=== 2.2.3 预定义变量 ===
true、false、iota为预定义，iota在每个const关键字出现时被设为0，在下一个出现前自动增加1.亦可以简写。
const (
	c0 = iota
	c1
	c2
)

=== 2.2.4 枚举 ===
使用const关键字定义，以大写字母开头的常量在包外可见，否则为包内私有。

--------------------

===== 2.3 类型 =====
**基础类型：**
布尔类型	bool
整型		int8、byte、int16、int、unit、unitptr
浮点类型	float32、float64
复数类型	complex64、complex128
字符串	string
字符类型	rune
错误类型	error
指针		pointer
数组		array
切片		slice
字典		map
通道		chan
结构体	struct
接口		interface
一般使用int和uint即可，没必要用int8之类指定长度类型，以免移植困难。

=== 2.3.1 布尔类型 ===
var v1 bool
v1 = true
v2 := (1 == 2)
不能接受其他变量，不能自动或强制类型转换。

=== 2.3.2 整型 ===
类型			长度			范围
int8			1			-128 ~ 127
uint8（byte）	1			0 ~ 255
int16			2			-32768 ~ 32767
unit16		2			0 ~ 65535
int32			4			-2147483648 ~ 2147483647
uint32		4			0 ~ 4294967295
int64			8			-9223372036854775808 ~ 9223372036854775807
unit64		8			0 ~ 18446744073709551615
int			平台相关		平台相关
unit			平台相关		平台相关
unitptr		同指针		在32位平台下为4字节，64位平台下为8字节

类型表示：
int和int32是两种不同的类型，需强制类型转换：
v2 = int32(v1)
数值运算：同C语言
比较运算：不同类型的整型数不能直接比较，但各种类型的整型变量都可以直接与字面常量进行比较。
位运算：
运算			含义
x << y		左移
x >> y		右移
x ^ y		异或
x & y		与
x | y			或
^x			取反

=== 2.3.3 浮点型 ===
采用IEEE-754标准的表达方式。
其类型自动被设为float64。
浮点数直接用==不能稳定，应当使用以下方案：
import	"math"
func [[IsEqual]] (f1,f2,p float64) bool {
	return math.Fdim(f1,f2) < p
}

=== 2.3.4 复数类型 ===
var v1 complex64
v1 = 3.2 + 12 i
v2 := 3.2 + 12 i
v3 := complex(3.2,12)

=== 2.3.5 字符串 ===
var str string
str = "Hello world"
ch := str[0]
字符串初始化后不能修改，
使用len()获取字符串长度。
字符串操作
运算		含义		样例
x + y	字符串连接	"Hello" + "123"
len(s)	字符串长度	len("Hello")
s[i]		取字符	“Hello"[1]
字符串遍历
以字节数组方式遍历，每个字符为byte
以Unicode字符遍历，每个字符类型为rune
str := "Hello,世界"
for i, ch := range str {
	fmt.Println(i, ch)
}

=== 2.3.6 字符类型 ===
一个byte（uint8的别名），代表UTF-8字符串单字节值；
另一个rune，代表单个Unicode字符。

=== 2.3.7 数组 ===
数组声明方式：
[32]byte				//长度为32数组
[2 * N] struct {x, y int32}	//复杂类型数组
[1000]*float64			//指针数组
[3][5] int				//二维数组
[2][2][2]float64			//等同于[2]([2]([2]float64))
数组的长度定义后不可更改。
元素访问：
for i := 0; i < len(array); i++ {
	fmt.Println("Elemrnt", i, "of array is", array[i])
}
也提供一个range，用于便捷遍历容器中元素：
for i, v := range array {
	fmt.Println("Array element [", i, "]=", v)
}
值类型：
所有值类型变量在赋值和作为参数传递时都将产生一次复制动作，函数体中无法修改传入数组的内容

=== 2.3.8 数组切片 ===
可以抽象为以下3个变量：
一个指向原生数组的指针；
数组切片中的元素个数；
数组切片已分配的储存空间；
创建数组切片：
	基于数组：
	var myArray [10] int = [10] int {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	var mySlice [] int = myArray[:5]
	直接创建：make函数
	创建5个的数组切片，初始值为0：
	mySlice := make([] int, 5)
	创建一个初始元素个数5的数组切片，元素初始值为0，预留10个元素储存空间：
	mySlice := make([]int, 5, 10)
	直接创建并初始化包含5个元素的数组切片：
	mySlice := []int {1, 2, 3, 4, 5}
元素遍历：
	同数组
动态增减元素：
	特点：元素个数和分配空间可以是两个不同值，可以大幅降低数组切片内部重新分配内存和搬送内存块的频率。
	cap()函数返回的是数组切片的空间大小，len()返回切片元素个数。
	使用append()函数，加上3个元素：
	mySlice = append(mySlice, 1, 2, 3)
	mySlice = append(mySlice, mySlice2...)
	数组切片会自动处理空间不足问题。
基于数组切片创建数组切片：
	oldSlice := [] int {1, 2, 3, 4, 5}
	newSlice := oldSlice[:3]
	后者可以容量超前者，会补0
内容复制：
	数组切片另一个内置函数copy（）,用于将内容复制，
	如果不一样大，按照较小切片复制。


=== 2.3.9 map ===
map是一堆键值对的未排序集合。
声明变量：
	var myMap map [string] [[PersonInfo]]
	myMap是声明的变量名，string是键的类型，PersonInfo则是其中所存放的值类型。
创建：
	使用make()创建：
	myMap = make(map [string] PersonInfo)
	可以指定map的初始储存能力：
	myMap = make(map [string] PersonInfo, 100)
	创建并初始化：
	myMap = map [string] [[PersonInfo]] {
		"1234": [[PersonInfo]] {"1", "Jack", "Room 101, ..."},
	}
	元素赋值：
	myMap["1234"] = [[PersonInfo]] {"1", "Jack", "Room 101, ..."}
	元素删除：
	delete (myMap, "1234")
	元素查找：
	声明并初始化一个变量为空；
	试图从map中获取相应键的值到该变量中；
	判断该变量是否依旧为空，如果为空则表示map中没有包含该变量。
	value, ok := myMap["1234"]
	if ok {
		//找到了
	}


===== 2.4 流程控制 =====
选择、循环、跳转。
条件语句：if、else 和 else、 if；
选择语句：switch、 case 和 select；
循环语句：for 和 range；
跳转语句：goto。

=== 2.4.1 条件语句 ===
if a < 5 {
	return 0
} else {
	return 1
}
不需要使用括号讲条件包含起来；
无论语句体有几条语句、花括号都必须存在；
在if之后，条件语句之前，可以添加变量初始化语句，使用; 间隔；
在有返回值的函数中，不允许将“最终的”return语句包含到if结构中，否则会编译失败；

=== 2.4.2 选择语句 ===
switch语句，后面可以是表达式，注意：
条件表达式不限制为常量或者整数；
单个case中，可以出现多个结果选项；
不需要break退出；
只有在case中添加fallthrough关键字，才会继续执行；
可以不设定switch后的表达式。

=== 2.4.3 循环语句 ===
go只支持for，不支持while：
sum := 0
for i := 0; i < 10; i++ {
	sum += i
}
或者简写：
for {
	sum ++;
	if sum > 100 {
		break
	}
}
并且支持多重赋值。注意：
go语言for同c，go不支持以逗号为间隔的多个赋值语句，必须使用平行赋值方式；
go语言支持continue和break，break JLoop终止外层循环。

=== 2.4.4 跳转语句 ===
goto语句：
func myfunc() {
	i := 0
	HERE:
	fmt.Println(i)
	i++
	if i < 10 {
		goto HERE
	}
}

===== 2.5 函数 =====
函数构成：关键字func、函数名、参数列表、返回值、函数体和返回语句。

=== 2.5.1 函数定义 ===
package mymath
import "error"

func Add(a int, b int) (ret int, err error){
	if a < 0 || b < 0{
		err = error.New("Should be non-negative number!")
		return
	}
	return a +b,nil
}



